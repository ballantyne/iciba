#!/usr/bin/env ruby

require 'iciba'
require 'optparse'
require 'readability'
require 'fileutils'

$links = false
$extended = true

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} ('words'|word)"
  opts.on("-l", "--links", "Download links?")  { |b| $links = true }
  opts.on("-s", "--single", "Single word")  { |b| $extended = false }
  opts.on("-p", "--pinyin", "Pinyin")  { |b| $pinyin = true }
  opts.on("-o", "--open", "go to fy.iciba.com")  { |b| $pinyin = true }
  opts.on("-h", "--help", "Print") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end


def wrap_text(txt, col = 80)
  txt = txt.encode('UTF-8')
  col = 40 if txt.contains_cjk?
  txt.gsub(/(.{1,#{col}})( +|$\n?)|(.{1,#{col}})/,
    "\\1\\3\n") 
end

if ARGV.empty?
  abort "Enter some words to lookup!"
elsif ARGV.first == 'open'
  `open http://fy.iciba.com`
  abort "opening http://fy.iciba.com"
end

regex = /https?:\/\/[\S]+/
links = ARGV.first.scan(regex)

def loop_through_links(links)
  puts links.inspect
  links.each do |l|
    text = Readability::Document.new(Iciba::Tools.download(l).force_encoding("UTF-8")).content.gsub('<p>', '').gsub('</p>', "\r\n").gsub('</div>', '').gsub('<div>', '')
    puts wrap_text(text) unless text == ''
    puts '------------------------------------------------------------------------------------' unless text == ''
  end
end
# puts ARGV.join(' ')
pinyin = ($pinyin ? true : false)
extended = ($extended ? true : false)
input_text = ARGV.join(' ').dup.encode("UTF-8")
Iciba::Fanyi.new(input_text, 'auto', true, extended, pinyin)
loop_through_links(links) if ($links && links.size > 0)